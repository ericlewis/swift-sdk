import OpenAPIRuntime
import OpenAPIURLSession
import Foundation
import CryptoKit
import AuthStampMiddleware

public struct TurnkeyClientTest {
    private let underlyingClient: any APIProtocol
    private let apiPrivateKey: String
    private let apiPublicKey: String
    

    internal init(underlyingClient: any APIProtocol, apiPrivateKey: String, apiPublicKey: String) {
        self.underlyingClient = underlyingClient
        self.apiPrivateKey = apiPrivateKey
        self.apiPublicKey = apiPublicKey
    }
    

    public init(apiPrivateKey: String, apiPublicKey: String) {
        self.init(
            underlyingClient: Client(
                serverURL: URL(string: "https://api.turnkey.com")!,
                transport: URLSessionTransport(),
                middlewares: [AuthStampMiddleware(apiPrivateKey: apiPrivateKey, apiPublicKey: apiPublicKey)]
            ),
            apiPrivateKey: apiPrivateKey,
            apiPublicKey: apiPublicKey
        )
    }

{# Uses '-' to trim newlines/whitespace #}
{% macro addMethodParams methodName -%}
    {% for struct in types.structs where struct.localName|split:"Request"|join == methodName -%}
        {% for method in struct.methods -%}
            {% for param in method.parameters -%}
                {{ param.name }}: {{ param.typeName|replace:"Swift.","" }}{% if not forloop.last %}, {% endif %}
            {%- endfor %}
        {%- endfor %}
    {%- endfor %}
{%- endmacro %}
{% macro addRequestBody methodName -%}
    {% for struct in types.structs where struct.localName|split:"Request"|join == methodName -%}
        {% for method in struct.methods -%}
            {% for param in method.parameters -%}
                {{struct.name}}({{ param.name }}: {{ param.name }}){% if not forloop.last %}, {% endif %}
            {%- endfor %}
        {%- endfor %}
    {%- endfor %}
{%- endmacro %}
{% for class in types.implementing.APIProtocol %}
    {% for method in class.instanceMethods where method.callName == "CreateApiKeys" or method.callName == "GetWhoami" %}
        {% set bodyInput method.parameters.0.typeName %}
        {% set returnType method.returnType.name %}
    public func {{ method.callName|lowerFirstLetter }}({% call addMethodParams method.callName %}) async throws -> {{ returnType }} {
        let input = {{ bodyInput }}(
            headers: .init(accept: [.init(contentType: .json)]),
            body: .json({% call addRequestBody method.callName %})
        )
        return try await underlyingClient.{{method.callName}}(input)
    }

    {% endfor %}
{% endfor %}
}