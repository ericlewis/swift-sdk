{% import "macros.stencil" %}
import OpenAPIRuntime
import OpenAPIURLSession
import Foundation
import CryptoKit
import AuthStampMiddleware

public struct TurnkeyClient {
    private let underlyingClient: any APIProtocol
    private let apiPrivateKey: String
    private let apiPublicKey: String
    

    internal init(underlyingClient: any APIProtocol, apiPrivateKey: String, apiPublicKey: String) {
        self.underlyingClient = underlyingClient
        self.apiPrivateKey = apiPrivateKey
        self.apiPublicKey = apiPublicKey
    }
    

    public init(apiPrivateKey: String, apiPublicKey: String) {
        self.init(
            underlyingClient: Client(
                serverURL: URL(string: "https://api.turnkey.com")!,
                transport: URLSessionTransport(),
                middlewares: [AuthStampMiddleware(apiPrivateKey: apiPrivateKey, apiPublicKey: apiPublicKey)]
            ),
            apiPrivateKey: apiPrivateKey,
            apiPublicKey: apiPublicKey
        )
    }

{% for class in types.implementing.APIProtocol %}
    {% for method in class.instanceMethods%}
        {% set bodyInput method.parameters.0.typeName %}
        {% set returnType method.returnType.name %}
        {% set output %}Operations.{{method.callName}}.Output.Ok.Body{% endset %}
        {# Determines if this is activityRequest vs a read request by looking at the output body type 
           If the enum contains "ActivityResponse" then we know it is an ActivityRequest
        #}
        {% set isActivityRequest %}
        {% for enum in types.enums where enum.name == output and enum.rawVariables.0.typeName|contains:"ActivityResponse" -%}true{%- endfor %}
        {% endset %}
        {% if isActivityRequest == true -%} 
            isActivityRequest - {{ isActivityRequest }}
            {# {% call generateActivityMethod method.callName -%}  #}
        {% else -%}
    public func {{ method.callName|lowerFirstLetter }}({% call addMethodParams method.callName %}) async throws -> {{ returnType }} {
        let input = {{ bodyInput }}(
            headers: .init(accept: [.init(contentType: .json)]),
            body: .json({% call addRequestBody method.callName %})
        )
        return try await underlyingClient.{{method.callName}}(input)
    }
        {% endif -%}
    {% endfor %}
{% endfor %}
    
}