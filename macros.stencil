{# Uses '-' to trim newlines/whitespace #}
{% macro addMethodParams methodName -%}
    {% for struct in types.structs where struct.localName|split:"Request"|join == methodName -%}
        {% for method in struct.methods -%}
            {% for param in method.parameters -%}
                {{ param.name }}: {{ param.typeName|replace:"Swift.","" }}{% if not forloop.last %}, {% endif %}
            {%- endfor %}
        {%- endfor %}
    {%- endfor %}
{%- endmacro %}

{% macro addRequestBody methodName -%}
    {% for struct in types.structs where struct.localName|split:"Request"|join == methodName -%}
        {% for method in struct.methods -%}
            {% for param in method.parameters -%}
                {{struct.name}}({{ param.name }}: {{ param.name }}){% if not forloop.last %}, {% endif %}
            {%- endfor %}
        {%- endfor %}
    {%- endfor %}
{%- endmacro %}


{% macro addActivityMethodParams methodName withIntent -%}
    {% for struct in types.structs where struct.localName|split:"Request"|join == methodName -%}
        {% for method in struct.methods -%}
            {% for param in method.parameters where param.name != "_type" and param.name != "timestampMs" -%}
                {% if param.name != "parameters" -%}
                    {{ param.name }}: {{ param.typeName|replace:"Swift.","" }}{% if not forloop.last %}, {% endif %}
                {% elif withIntent == true -%}
                    {% map param.type.variables into params %}{{ maploop.item.name }}: {{ maploop.item.typeName|replace:"Swift.","" }}{% endmap %}{{ params|join:", " }}
                {%- endif %}
            {%- endfor %}
        {%- endfor %}
    {%- endfor %}
{%- endmacro %}

{% macro getActivityType methodName -%}
    {% for struct in types.structs where struct.localName|split:"Request"|join == methodName -%}
        {% for method in struct.methods -%}
            {% for param in method.parameters where param.name == "_type" -%}
                .{{ param.type.cases.0.rawValue }}
            {%- endfor %}
        {%- endfor %}
    {%- endfor %}
{%- endmacro %}

{% macro getIntentParams methodName -%}
    {% for struct in types.structs where struct.localName|split:"Intent"|join == methodName -%}
        {% map struct.variables into params -%}{{ maploop.item.name }}: {{ maploop.item.name }}{%- endmap %}
        {{ params|join:", " }}
    {%- endfor %}
{%- endmacro %}

{% macro generateActivityMethod methodName -%}
        {% set bodyInput method.parameters.0.typeName %}
        {% set returnType method.returnType.name %}

    public func {{ method.callName|lowerFirstLetter }}({% call addActivityMethodParams method.callName true %}) async throws -> Operations.{{method.callName}}.Output {
        // Create the {{ method.callName }}Intent
        let {{ method.callName|lowerFirstLetter }}Intent = Components.Schemas.{{ method.callName }}Intent({% call getIntentParams method.callName %})
        
        // Create the {{ method.callName }}Request
        let {{ method.callName|lowerFirstLetter }}Request = Components.Schemas.{{ method.callName }}Request(
            _type: {% call getActivityType method.callName %},
            timestampMs: String(Date().timeIntervalSince1970 * 1000),
            {% call addActivityMethodParams method.callName false %}
            parameters: {{ method.callName|lowerFirstLetter }}Intent
        )
        
        // Create the input for the {{ method.callName }} method
        let input = Operations.{{method.callName}}.Input(body: .json({{ method.callName|lowerFirstLetter }}Request))
        
        // Call the {{ method.callName }} method using the underlyingClient
        return try await underlyingClient.{{ method.callName }}(input)
    }
{%- endmacro %}