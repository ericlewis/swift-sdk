{% import "macros.stencil" %}
import OpenAPIRuntime
import OpenAPIURLSession
import Foundation
import CryptoKit
import AuthStampMiddleware

public struct TurnkeyClient {
    private let underlyingClient: any APIProtocol
    private let apiPrivateKey: String
    private let apiPublicKey: String
    

    internal init(underlyingClient: any APIProtocol, apiPrivateKey: String, apiPublicKey: String) {
        self.underlyingClient = underlyingClient
        self.apiPrivateKey = apiPrivateKey
        self.apiPublicKey = apiPublicKey
    }
    

    public init(apiPrivateKey: String, apiPublicKey: String) {
        self.init(
            underlyingClient: Client(
                serverURL: URL(string: "https://api.turnkey.com")!,
                transport: URLSessionTransport(),
                middlewares: [AuthStampMiddleware(apiPrivateKey: apiPrivateKey, apiPublicKey: apiPublicKey)]
            ),
            apiPrivateKey: apiPrivateKey,
            apiPublicKey: apiPublicKey
        )
    }

{% for class in types.implementing.APIProtocol %}
    {% for method in class.instanceMethods %}
        {% set bodyInput method.parameters.0.typeName %}
        {% set returnType method.returnType.name %}
        {# Generates the name of the request struct by concating the method name with "Request"
            Example:
                method.callName = "ApproveActivity"
                requestStructName = "ApproveActivityRequest"
         #}   
        {% set requestStructName %}{{method.callName}}Request{% endset %}
        {% set output %}Operations.{{method.callName}}.Output.Ok.Body{% endset %}
        {# Determines if this is activityRequest vs a read request by looking at the output body type 
           If the enum contains "ActivityResponse" then we know it is an ActivityRequest
        #}
        {% set isActivityRequest %}
        {% for struct in types.structs where struct.name|hasSuffix:requestStructName and struct.methods.0.parameters.0.name == "_type" -%}true{%- endfor %}
        {% endset %}
        
        {% if isActivityRequest|contains:"true" -%} 
            {% call generateActivityMethod method.callName -%}
        {% else -%}

    public func {{ method.callName|lowerFirstLetter }}({% call addMethodParams method.callName %}) async throws -> {{ returnType }} {

        // Create the {{ requestStructName }}
        let {{ method.callName|lowerFirstLetter }}Request = Components.Schemas.{{ requestStructName }}(
            {% for struct in types.structs where struct.name|hasSuffix:requestStructName -%}
                {% for var in struct.variables -%}
                    {{ var.name }}: {{ var.name }}{% if not forloop.last %}, {% endif %}
                {%- endfor %}
            {%- endfor %}
        )

        let input = {{ bodyInput }}(
            headers: .init(accept: [.init(contentType: .json)]),
            body: .json({{ requestStructName|lowerFirstLetter }})
        )
        return try await underlyingClient.{{method.callName}}(input)
    }
        {% endif -%}
    {% endfor %}
{% endfor %}
    
}