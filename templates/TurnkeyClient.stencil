import Middleware
import AuthenticationServices
import CryptoKit
import Foundation
import OpenAPIRuntime
import OpenAPIURLSession
import Shared

public struct TurnkeyClient {
  public static let baseURLString = "https://api.turnkey.com"

  private let underlyingClient: any APIProtocol

  internal init(underlyingClient: any APIProtocol) {
    self.underlyingClient = underlyingClient
  }
  
  /// Initializes a `TurnkeyClient` with a proxy server URL.
  ///
  /// This initializer configures the `TurnkeyClient` to route all requests through a specified proxy server.
  /// The proxy server is responsible for forwarding these requests to a backend capable of authenticating them using an API private key.
  /// This setup is particularly useful during onboarding flows, such as email authentication and creating new sub-organizations,
  /// where direct authenticated requests are not feasible.
  ///
  /// - Parameter proxyURL: The URL of the proxy server that will forward requests to the authenticating backend.
  ///
  /// - Note: The `TurnkeyClient` initialized with this method does not directly send authenticated requests. Instead, it relies on the proxy server to handle the authentication.
  public init(proxyURL: String) {
    self.init(
      underlyingClient: Client(
        serverURL: URL(string: "https://api.turnkey.com")!,
        transport: URLSessionTransport(),
        middlewares: [ProxyMiddleware(proxyURL: URL(string: proxyURL)!)]
      )
    )
  }

  {# TODO: Add this function in the future to initialize a TurnkeyClient instance 
    that uses the stored private key and public key to authenticate the user.

  public init(useDeviceCredentials: bool = false) {
    let stamper = Stamper(useDeviceCredentials: useDeviceCredentials)
    self.init(underlyingClient: Client(serverURL: URL(string: "https://api.turnkey.com")!, transport: URLSessionTransport(), middlewares: []), passkeyManager: nil)
  }
  #}
  /// Initializes a `TurnkeyClient` with API keys for authentication.
  ///
  /// This initializer creates an instance of `TurnkeyClient` using the provided `apiPrivateKey` and `apiPublicKey`.
  /// These keys are typically obtained through the Turnkey CLI or your account dashboard. The client uses these keys
  /// to authenticate requests via a `Stamper` which stamps each request with the key pair.
  ///
  /// - Parameters:
  ///   - apiPrivateKey: The private key obtained from Turnkey, used for signing requests.
  ///   - apiPublicKey: The public key obtained from Turnkey, used to identify the client.
  ///   - baseUrl: The base URL of the Turnkey API. Defaults to "https://api.turnkey.com".
  ///
  /// - Note: For client-side usage where all authenticated requests need secure key management,
  ///   it is recommended to use the `AuthKeyManager` for creating, storing, and securely using key pairs.
  ///   For more details, refer to the [AuthKeyManager](#AuthKeyManager).
  ///
  /// - Example:
  ///   ```
  ///   let client = TurnkeyClient(apiPrivateKey: "your_api_private_key", apiPublicKey: "your_api_public_key")
  ///   ```
  public init(apiPrivateKey: String, apiPublicKey: String, baseUrl: String = "https://api.turnkey.com") {
    let stamper = Stamper(apiPublicKey: apiPublicKey, apiPrivateKey: apiPrivateKey)
    self.init(
      underlyingClient: Client(
        serverURL: URL(string: baseUrl)!,
        transport: URLSessionTransport(),
        middlewares: [AuthStampMiddleware(stamper: stamper)]
      )
    )
  }

  /// Creates an instance of the TurnkeyClient that uses passkeys for authentication.
  ///
  /// This initializer sets up the TurnkeyClient with a specific `rpId` (Relying Party Identifier) and `presentationAnchor`.
  ///
  /// - Important:
  ///   You need to have an associated domain with the `webcredentials` service type when making a registration or assertion request;
  ///   otherwise, the request returns an error. For more information, see [Supporting Associated Domains](https://developer.apple.com/documentation/xcode/supporting-associated-domains).
  ///
  /// - Parameters:
  ///   - rpId: The relying party identifier used for passkey authentication.
  ///   - presentationAnchor: The presentation anchor used for displaying authentication interfaces.
  ///   - baseUrl: The base URL of the Turnkey API. Defaults to "https://api.turnkey.com".
  ///
  /// - Example:
  ///   ```
  ///   let presentationAnchor = ASPresentationAnchor()
  ///   let client = TurnkeyClient(rpId: "com.example.domain", presentationAnchor: presentationAnchor)
  ///   ```
  public init(rpId: String, presentationAnchor: ASPresentationAnchor, baseUrl: String = "https://api.turnkey.com") {
    let stamper = Stamper(rpId: rpId, presentationAnchor: presentationAnchor)
    self.init(
      underlyingClient: Client(
        serverURL: URL(string: baseUrl)!,
        transport: URLSessionTransport(),
        middlewares: [AuthStampMiddleware(stamper: stamper)]
      )
    )
  }

{% import "macros.stencil" %}
{% for class in types.implementing.APIProtocol %}
    {% for method in class.instanceMethods %}
        {% set bodyInput method.parameters.0.typeName %}
        {% set returnType method.returnType.name %}
        {# Generates the name of the request struct by concating the method name with "Request"
            Example:
                method.callName = "ApproveActivity"
                requestStructName = "ApproveActivityRequest"
         #}   
        {% set requestStructName %}{{method.callName}}Request{% endset %}
        {% set output %}Operations.{{method.callName}}.Output.Ok.Body{% endset %}
        {# Determines if this is activityRequest vs a read request by looking at the output body type 
           If the enum contains "ActivityResponse" then we know it is an ActivityRequest
        #}
        {% set isActivityRequest %}
        {% for struct in types.structs where struct.name|hasSuffix:requestStructName and struct.methods.0.parameters.0.name == "_type" -%}true{%- endfor %}
        {% endset %}
        
        {% if isActivityRequest|contains:"true" -%} 
            {% call generateActivityMethod method.callName -%}
        {% else -%}

    public func {{ method.callName|lowerFirstLetter }}({% call addMethodParams method.callName %}) async throws -> {{ returnType }} {

        // Create the {{ requestStructName }}
        let {{ method.callName|lowerFirstLetter }}Request = Components.Schemas.{{ requestStructName }}(
            {% for struct in types.structs where struct.name|hasSuffix:requestStructName -%}
                {% for var in struct.variables -%}
                    {{ var.name }}: {{ var.name }}{% if not forloop.last %}, {% endif %}
                {%- endfor %}
            {%- endfor %}
        )

        let input = {{ bodyInput }}(
            headers: .init(accept: [.init(contentType: .json)]),
            body: .json({{ requestStructName|lowerFirstLetter }})
        )
        return try await underlyingClient.{{method.callName}}(input)
    }
        {% endif -%}
    {% endfor %}
{% endfor %}
    
}